#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Remote Exploit.

Main server file.
"""
import builtins
from io import FileIO
import logging
import os
import sys
from types import FunctionType
from typing import Any, TextIO

import colorama
import coloredlogs
from flask import Flask
import verboselogs

from .controllers.main import main
from .controllers.list import list
from .http.static import public, ui

colorama.init(autoreset=True)

coloredlogs.install(
    verboselogs.SPAM,
    fmt=colorama.Fore.MAGENTA
    + "%(processName)s#%(threadName)s"
    + colorama.Fore.CYAN
    + " At %(pathname)s:%(lineno)d, in %(funcName)s\n"
    + colorama.Style.RESET_ALL
    + "[  %(name)s  ] %(asctime)s: %(levelname)s %(message)s",
)


def logging_print(
    *objects: Any,
    sep: str = " ",
    end: str = "",
    file: TextIO = sys.stdout,
    flush: bool = False
) -> None:
    """
    A custom print function using logging.

    :param sep: Separator between objects, defaults to " "
    :type sep: str, optional
    :param end: End character, logging as default \n, defaults to ""
    :type end: str, optional
    :param file: Another file to write output to, defaults to sys.stdout
    :type file: TextIO, optional
    :param flush: Wether to flush output file or not, defaults to False
    :type flush: bool, optional
    """
    string: str = ""
    for index in range(len(objects) - 1):
        string += str(objects[index]) + sep
    string += str(objects[-1]) + end
    logging.info(string)
    if file is not sys.stdout:
        file.write(string)
        if flush:
            file.flush()


_print: FunctionType = print
builtins.print = lambda *args, **kwargs: logging_print(*args, **kwargs)

print("hey")

server: Flask = Flask(__name__)
"""The main Flask server."""

server.template_folder = os.path.abspath("app/views")

# HTTP Static
server.add_url_rule("/public/<path:filename>", view_func=public)
server.add_url_rule("/ui/<path:filename>", view_func=ui)

server.add_url_rule("/list", view_func=list)

if __name__ == "__main__":
    server.run(host="0.0.0.0", port=8080, debug=True)
